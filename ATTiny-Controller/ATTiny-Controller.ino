#include "SSD1306_minimal.h"
#include <avr/pgmspace.h>
#include <avr/wdt.h>

//DISPLAY------------------------------------------------------------------------------------------------------------------
SSD1306_Mini oled;

//Byte array of bitmap of 123 x 48 px:
const unsigned char solder_logo [] PROGMEM = {
  0x1c, 0x3e, 0x77, 0x63, 0x63, 0x63, 0xc3, 0x83, 0x00, 0x00, 0xfc, 0xfe, 0x07, 0x03, 0x03, 0x07, 0xfe, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x03, 0x03, 0x07, 0xfe, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x63, 0x63, 0x63, 0x03, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xe3, 0xe3, 0x77, 0x3e, 0x1c, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x18, 0x30, 0x60, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xfe, 0x07, 0x03, 0xc3, 0xc3, 0xce, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0x78, 0x38, 0x0c, 0x0c, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0c, 0x0c, 0x18, 0x78, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x01, 0x03, 0x07, 0x0e, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xf0, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1c, 0x3e, 0x77, 0x63, 0x63, 0x63, 0xc3, 0x83, 0x00, 0x00, 0x03, 0x03, 0x03, 0xff, 0xff, 0x03, 0x03, 0x03, 0x00, 0x00, 0xf8, 0xfe, 0x87, 0x83, 0x83, 0x87, 0xfe, 0xf8, 0x00, 0x00, 0x03, 0x03, 0x03, 0xff, 0xff, 0x03, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0xfc, 0xfe, 0x07, 0x03, 0x03, 0x07, 0xfe, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x18, 0x30, 0x60, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x7f, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x01, 0x01, 0x01, 0x01, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0c, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0xb8, 0x5c, 0x2e, 0x17, 0x0b, 0x07, 0x07, 0x0f, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0xb8, 0x5c, 0x2e, 0x17, 0x0b, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x07, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
/*
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0x78, 0x38, 0x0c, 0x0c, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0c, 0x0c, 0x18, 0x78, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xf0, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x7f, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0xb8, 0x5c, 0x2e, 0x17, 0x0b, 0x07, 0x07, 0x0f, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0xb8, 0x5c, 0x2e, 0x17, 0x0b, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x06, 0x07, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
*/
};

char buff[20];
unsigned long last_time;
int print_setpoint, print_input, print_output;
#define REFRESH_TIME_MS 150 

//PWM----------------------------------------------------------------------------------------------------------------------
#define PWM_pin 1
int level;

//ADC----------------------------------------------------------------------------------------------------------------------
//Formula retta per scalatura lettura temperatura
//Y = mX + q
//    X  -  Y
//1. 460 - 151
//2. 760 - 495
//m = dy / dx = 1.148
//q = (x2y1 - x1y2) / (x2 - x1) = -377.526
float INPUT_MUL = 1.148;
int INPUT_ADD = -377;

//Formula retta per scalatura temperatura di comando
//Y = mX + q
//    X  -  Y
//1.  23 - 200
//2.1000 - 450
//m = dy / dx = 0.2559
//q = (x2y1 - x1y2) / (x2 - x1) = 194.1146
float SETPOINT_MUL = 0.2559;
int SETPOINT_ADD = 194;

#define ADC_CMD_pin A2
#define ADC_TEMP_pin A3
int temp_return;

//PID----------------------------------------------------------------------------------------------------------------------
#define TEMPERATURE_GAP 20

float Upper_P_limit = 255;
float Lower_P_limit = 0;

float Upper_I_limit = 255;
float Lower_I_limit = 0;

float Upper_D_limit = 255;
float Lower_D_limit = 0;

float Upper_Total_limit = 255;
float Lower_Total_limit = 0;

float Kp = 1;
float Ki = 0.05;
float Kd = 0.25;

int Setpoint, Input, Output;
/*
double Kp = 1;
double Ki = 0.05;
double Kd = 0.25;

//Define Variables we'll be connecting to
double Setpoint, Input, Output;

//Specify the links and initial tuning parameters
PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);*/

//FUNCTIONS----------------------------------------------------------------------------------------------------------------
void initDISPLAY()
{
  delay(1000);
  oled.init(0x3c); //indirizzo del display
  oled.startScreen();
  oled.clear();

  oled.drawImage(solder_logo, 5, 2, 123, 6);  //immagine, x, y, n째 byte x, n째 colonne byte
//  oled.drawImage(solder_logo, 62, 2, 61, 6);  //immagine, x, y, n째 byte x, n째 colonne byte
  delay(1500);

  oled.clear();
}

//SETUP--------------------------------------------------------------------------------------------------------------------
void setup() 
{
  MCUSR = 0x00; //resetta il registro di stato della MCU
  wdt_disable();
  
  pinMode(PWM_pin, OUTPUT);
  
  initDISPLAY();

  last_time = millis();

  wdt_enable(WDTO_1S);
}

//MAIN---------------------------------------------------------------------------------------------------------------------
void loop() 
{
  Setpoint = SETPOINT_MUL * analogRead(ADC_CMD_pin) + SETPOINT_ADD;
  Input = INPUT_MUL * analogRead(ADC_TEMP_pin) +  INPUT_ADD;
  
//limiti di temperatura
  if (Setpoint < 200) Setpoint = 200;
  if (Setpoint > 450) Setpoint = 450;

  print_setpoint = (int(Setpoint) / 5) * 5;
  print_input = (int(Input) / 5) * 5;

//utilizzo il PID solo all'interno del range impostato  
  if (Setpoint < Input - TEMPERATURE_GAP)
  {
    analogWrite(PWM_pin, 0);
    print_output = 0;
  }
  
  else if (Setpoint > Input + TEMPERATURE_GAP)
  {
    analogWrite(PWM_pin, 255);
    print_output = 255;
  }

  else
  {
    Output = PID(Setpoint, Input);
    analogWrite(PWM_pin, Output);
    print_output = int(Output);
  }
  
//stampo parametri ogni "REFRESH_TIME_MS"
  if (millis() - last_time >= REFRESH_TIME_MS) 
  { 
    sprintf(buff, "Setpoint: %3d  ", print_setpoint);
    oled.cursorTo(5, 1);
    oled.printString(buff);
  
    sprintf(buff, "Input: %3d  ", print_input);
    oled.cursorTo(5, 2);
    oled.printString(buff);
  
    sprintf(buff, "Output: %3d  ", print_output);
    oled.cursorTo(5, 3);
    oled.printString(buff);

    last_time = millis();
  }
  
  wdt_reset();
}
